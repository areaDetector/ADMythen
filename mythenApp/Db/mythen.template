#================================================
# template for Dectris Mythen Driver
#
# Macros:
# %macro, P, Device Prefix
# %macro, R, Device Suffix
# %macro, PORT, Asyn port name
# %macro, TIMEOUT, Timeout, default 1
# %macro, ADDR, Asyn Port Address, default 0
#
# %gui, $(PORT), edmtab, mythen.edl, P=$(P),R=$(R)
#================================================

include "ADBase.template"

#----------------------------------
# Detector Setting
#----------------------------------

record (mbbo, "$(P)$(R)Setting")
{
    field (DESC, "Detector setting")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_SETTING")
    field (ZRST, "Cu")
    field (ZRVL, "0")
    field (ONST, "Mo")
    field (ONVL, "1")
    field (TWST, "Ag")
    field (TWVL, "2")
    field (THST, "Cr")
    field (THVL, "3")
    field (VAL,  "0")
    field (PINI, "YES")
}

record (mbbi, "$(P)$(R)Setting_RBV")
{
    field (DESC, "Detector setting")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_SETTING")
    field (ZRST, "Cu")
    field (ZRVL, "0")
    field (ONST, "Mo")
    field (ONVL, "1")
    field (TWST, "Ag")
    field (TWVL, "2")
    field (THST, "Cr")
    field (THVL, "3")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Threshold Energy 
#----------------------------------
record (ao, "$(P)$(R)ThresholdEnergy")
{
    field (DESC, "Threshold energy")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_THRESHOLD")
    field (EGU,  "keV")
    field (PREC, "2")
    field (VAL,  "8.05")
    field (PINI, "YES")
}

record (ai, "$(P)$(R)ThresholdEnergy_RBV")
{
    field (DESC, "Threshold energy")
    field (DTYP, "asynFloat64")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_THRESHOLD")
    field (EGU,  "keV")
    field (PREC, "2")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Beam Energy 
#----------------------------------
record (ao, "$(P)$(R)BeamEnergy")
{
    field (DESC, "Beam energy")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_ENERGY")
    field (EGU,  "keV")
    field (VAL,  "8.1")
    field (PREC, "2")
    field (PINI, "YES")
}

record (ai, "$(P)$(R)BeamEnergy_RBV")
{
    field (DESC, "Beam energy")
    field (DTYP, "asynFloat64")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_ENERGY")
    field (EGU,  "keV")
    field (PREC, "2")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Enable Flat Field Correction
#----------------------------------
record (bo, "$(P)$(R)UseFlatField")
{
    field (DESC, "Enable flat field")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_USE_FLATFIELD")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "1")
    field (PINI, "YES")
}

record (bi, "$(P)$(R)UseFlatField_RBV")
{
    field (DESC, "Enable flat field")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_USE_FLATFIELD")
    field (ZNAM, "Disabled")
    field (ONAM, "Enabled")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Enable Count Rate Correction
#----------------------------------
record (bo, "$(P)$(R)UseCountRate")
{
    field (DESC, "Enable count rate")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_USE_COUNTRATE")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "1")
    field (PINI, "YES")
}

record (bi, "$(P)$(R)UseCountRate_RBV")
{
    field (DESC, "Enable count rate")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_USE_COUNTRATE")
    field (ZNAM, "Disabled")
    field (ONAM, "Enabled")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Set Deadtime Constant (used in rate correction)
#----------------------------------
record(ao, "$(P)$(R)Tau")
{
    field (DESC, "Deadtime Constant")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_TAU")
    field (EGU,  "ns")
    field (PREC, "6")
    field (VAL,  "-1.0")
    field (PINI, "YES")
}

record(ai, "$(P)$(R)Tau_RBV")
{
    field(DESC, "Deadtime Constand")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_TAU")
    field(EGU,  "ns")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}

#----------------------------------
# Enable Bad Channel Interpolation
#----------------------------------
record (bo, "$(P)$(R)UseBadChanIntrpl")
{
    field (DESC, "Enable BadChannel Intrpl")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_USE_BADCHANNEL_INTRPL")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "1")
    field (PINI, "YES")
}

record (bi, "$(P)$(R)UseBadChanIntrpl_RBV")
{
    field (DESC, "Enable BadChannel Intrpl")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_USE_BADCHANNEL_INTRPL")
    field (ZNAM, "Disabled")
    field (ONAM, "Enabled")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Set Number of Data Bits
#----------------------------------
record (mbbo, "$(P)$(R)BitDepth")
{
    field (DESC, "Detector bit depth")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_BIT_DEPTH")
    field (ZRST, "24")
    field (ZRVL, "0")
    field (ONST, "16")
    field (ONVL, "1")
    field (TWST, "8")
    field (TWVL, "2")
    field (THST, "4")
    field (THVL, "3")
    field (VAL,  "0")
    field (PINI, "YES")
}

record (longin, "$(P)$(R)BitDepth_RBV")
{
    field (DESC, "Detector bit depth")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_BIT_DEPTH")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Enable Gates
#----------------------------------

record (bo, "$(P)$(R)UseGates")
{
    field (DESC, "Enable gates")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_USE_GATES")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "0")
    field (PINI, "YES")
}

record (bi, "$(P)$(R)UseGates_RBV")
{
    field (DESC, "Enable gates")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_USE_GATES")
    field (ZNAM, "Disabled")
    field (ONAM, "Enabled")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Number of Gates
#----------------------------------
record (longout, "$(P)$(R)NumGates")
{
    field (DESC, "Number of gates")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_NUM_GATES")
    field (VAL,  "1")
    field (PINI, "YES")
}

record (longin, "$(P)$(R)NumGates_RBV")
{
    field (DESC, "Number of gates")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_NUM_GATES")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Trigger Mode
#----------------------------------
record (mbbo, "$(P)$(R)TriggerMode")
{
    field (DESC, "Detector Trigger mode")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))TRIGGER_MODE")
    field (ZRST, "None")
    field (ZRVL, "0")
    field (ONST, "Single")
    field (ONVL, "1")
    field (TWST, "Continuous")
    field (TWVL, "2")
    field (VAL,  "0")
    field (PINI, "YES")
}

record (mbbi, "$(P)$(R)TriggerMode_RBV")
{
    field (DESC, "Detector Trigger mode")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))TRIGGER_MODE")
    field (ZRST, "None")
    field (ZRVL, "0")
    field (ONST, "Single")
    field (ONVL, "1")
    field (TWST, "Continuous")
    field (TWVL, "2")
    field (THST, "unknown")
    field (THVL, "3")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Readback Number of Detector Modules
#----------------------------------
record (longin, "$(P)$(R)NumModules_RBV")
{
    field (DESC, "Number of modules")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_NMODULES")
    field (SCAN, "I/O Intr")
}

#----------------------------------
# Firmware Version
#----------------------------------
record(stringin, "$(P)$(R)FirmwareVersion_RBV")
{
   field(PINI, "YES")
   field(SCAN, "I/O Intr")
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_FIRMWARE_VERSION")
}

record(ai, "$(P)$(R)FirmwareMajor_RBV")
{
   field(PINI, "YES")
   field(SCAN, "I/O Intr")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_FIRMWARE_MAJOR")
}

#----------------------------------
# Reset
#----------------------------------
record(ao, "$(P)$(R)Reset")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))SD_RESET")
}

#----------------------------------
# Unsupported
#----------------------------------

# We are dealing with counts so gain does not make sense
record (ao, "$(P)$(R)Gain")
{
    field(DISA, "1")
}

record (ai, "$(P)$(R)Gain_RBV")
{
    field(DISA, "1")
}

# No shutter on the detector
record (mbbo, "$(P)$(R)ShutterMode")
{
    field(DISA, "1")
}

record (mbbi, "$(P)$(R)ShutterMode_RBV")
{
    field(DISA, "1")
}

record (bo, "$(P)$(R)ShutterControl")
{
    field(DISA, "1")
}

record (bi, "$(P)$(R)ShutterControl_RBV")
{
    field(DISA, "1")
}

record (bi, "$(P)$(R)ShutterStatus_RBV")
{
    field(DISA, "1")
}

record (ao, "$(P)$(R)ShutterCloseDelay")
{
    field(DISA, "1")
}

record (ai, "$(P)$(R)ShutterCloseDelay_RBV")
{
    field(DISA, "1")
}

record (ao, "$(P)$(R)ShutterOpenDelay")
{
    field(DISA, "1")
}

record (ai, "$(P)$(R)ShutterOpenDelay_RBV")
{
    field(DISA, "1")
}

# No temperature sensor on the detector
record (ao, "$(P)$(R)Temperature")
{
    field(DISA, "1")
}

record (ai, "$(P)$(R)Temperature_RBV")
{
    field(DISA, "1")
}

record (ai, "$(P)$(R)Temperature_Actual")
{
    field(DISA, "1")
}

# Color setting not applicable
record (mbbo, "$(P)$(R)ColorMode") {
    field(DISA, "1")
}

record (mbbo, "$(P)$(R)BayerPattern") {
    field(DISA, "1")
}

# From documentation the detector does not support this
record (longout, "$(P)$(R)NumExposures") {
    field(DISA, "1")
}

# Set from nbits
# Data type of the array is for now always NDUInt32, should be infered from 
# nbits TODO
record (mbbo, "$(P)$(R)DataType") {
    field(DISA, "1")
}

# Detector only supports readout of the whole array
record (longout, "$(P)$(R)BinX") {
    field(DISA, "1")
}

record (longout, "$(P)$(R)BinY") {
    field(DISA, "1")
}

record (longout, "$(P)$(R)MinX") {
    field(DISA, "1")
}

record (longout, "$(P)$(R)MinY") {
    field(DISA, "1")
}

record (longout, "$(P)$(R)SizeX") {
    field(DISA, "1")
}

record (longout, "$(P)$(R)SizeY") {
    field(DISA, "1")
}

record (bo, "$(P)$(R)ReverseX") {
    field(DISA, "1")
}

record (bo, "$(P)$(R)ReverseY") {
    field(DISA, "1")
}

record (mbbo, "$(P)$(R)FrameType") {
    field(DISA, "1")
}
